/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ChromePolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The target org unit on which this policy is applied.
	OrgUnitID *string `json:"orgUnitId,omitempty" tf:"org_unit_id,omitempty"`

	// Policies to set for the org unit
	Policies []PoliciesObservation `json:"policies,omitempty" tf:"policies,omitempty"`
}

type ChromePolicyParameters struct {

	// The target org unit on which this policy is applied.
	// +crossplane:generate:reference:type=github.com/alanraison/provider-googleworkspace/apis/directory/v1alpha1.OrgUnit
	// +crossplane:generate:reference:refFieldName=OrgUnitRef
	// +crossplane:generate:reference:selectorFieldName=OrgUnitSelector
	// +kubebuilder:validation:Optional
	OrgUnitID *string `json:"orgUnitId,omitempty" tf:"org_unit_id,omitempty"`

	// Reference to a OrgUnit in directory to populate orgUnitId.
	// +kubebuilder:validation:Optional
	OrgUnitRef *v1.Reference `json:"orgUnitRef,omitempty" tf:"-"`

	// Selector for a OrgUnit in directory to populate orgUnitId.
	// +kubebuilder:validation:Optional
	OrgUnitSelector *v1.Selector `json:"orgUnitSelector,omitempty" tf:"-"`

	// Policies to set for the org unit
	// +kubebuilder:validation:Optional
	Policies []PoliciesParameters `json:"policies,omitempty" tf:"policies,omitempty"`
}

type PoliciesObservation struct {

	// The full qualified name of the policy schema.
	SchemaName *string `json:"schemaName,omitempty" tf:"schema_name,omitempty"`

	// JSON encoded map that represents key/value pairs that correspond to the given schema.
	SchemaValues map[string]*string `json:"schemaValues,omitempty" tf:"schema_values,omitempty"`
}

type PoliciesParameters struct {

	// The full qualified name of the policy schema.
	// +kubebuilder:validation:Required
	SchemaName *string `json:"schemaName" tf:"schema_name,omitempty"`

	// JSON encoded map that represents key/value pairs that correspond to the given schema.
	// +kubebuilder:validation:Required
	SchemaValues map[string]*string `json:"schemaValues" tf:"schema_values,omitempty"`
}

// ChromePolicySpec defines the desired state of ChromePolicy
type ChromePolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ChromePolicyParameters `json:"forProvider"`
}

// ChromePolicyStatus defines the observed state of ChromePolicy.
type ChromePolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ChromePolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ChromePolicy is the Schema for the ChromePolicys API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,googleworkspace}
type ChromePolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.policies)",message="policies is a required parameter"
	Spec   ChromePolicySpec   `json:"spec"`
	Status ChromePolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ChromePolicyList contains a list of ChromePolicys
type ChromePolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ChromePolicy `json:"items"`
}

// Repository type metadata.
var (
	ChromePolicy_Kind             = "ChromePolicy"
	ChromePolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ChromePolicy_Kind}.String()
	ChromePolicy_KindAPIVersion   = ChromePolicy_Kind + "." + CRDGroupVersion.String()
	ChromePolicy_GroupVersionKind = CRDGroupVersion.WithKind(ChromePolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&ChromePolicy{}, &ChromePolicyList{})
}
