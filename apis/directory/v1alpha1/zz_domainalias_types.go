/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DomainAliasObservation struct {

	// Creation time of the domain alias.
	CreationTime *float64 `json:"creationTime,omitempty" tf:"creation_time,omitempty"`

	// The domain alias name.
	DomainAliasName *string `json:"domainAliasName,omitempty" tf:"domain_alias_name,omitempty"`

	// ETag of the resource.
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer.
	ParentDomainName *string `json:"parentDomainName,omitempty" tf:"parent_domain_name,omitempty"`

	// Indicates the verification state of a domain alias.
	Verified *bool `json:"verified,omitempty" tf:"verified,omitempty"`
}

type DomainAliasParameters struct {

	// The domain alias name.
	// +kubebuilder:validation:Optional
	DomainAliasName *string `json:"domainAliasName,omitempty" tf:"domain_alias_name,omitempty"`

	// The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer.
	// +kubebuilder:validation:Optional
	ParentDomainName *string `json:"parentDomainName,omitempty" tf:"parent_domain_name,omitempty"`
}

// DomainAliasSpec defines the desired state of DomainAlias
type DomainAliasSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DomainAliasParameters `json:"forProvider"`
}

// DomainAliasStatus defines the observed state of DomainAlias.
type DomainAliasStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DomainAliasObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DomainAlias is the Schema for the DomainAliass API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,googleworkspace}
type DomainAlias struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.domainAliasName)",message="domainAliasName is a required parameter"
	Spec   DomainAliasSpec   `json:"spec"`
	Status DomainAliasStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DomainAliasList contains a list of DomainAliass
type DomainAliasList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DomainAlias `json:"items"`
}

// Repository type metadata.
var (
	DomainAlias_Kind             = "DomainAlias"
	DomainAlias_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DomainAlias_Kind}.String()
	DomainAlias_KindAPIVersion   = DomainAlias_Kind + "." + CRDGroupVersion.String()
	DomainAlias_GroupVersionKind = CRDGroupVersion.WithKind(DomainAlias_Kind)
)

func init() {
	SchemeBuilder.Register(&DomainAlias{}, &DomainAliasList{})
}
