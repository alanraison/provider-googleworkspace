/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OrgUnitObservation struct {

	// Defaults to `false`. Determines if a sub-organizational unit can inherit the settings of the parent organization. False means a sub-organizational unit inherits the settings of the nearest parent organizational unit. For more information on inheritance and users in an organization structure, see the [administration help center](https://support.google.com/a/answer/4352075).
	BlockInheritance *bool `json:"blockInheritance,omitempty" tf:"block_inheritance,omitempty"`

	// Description of the organizational unit.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ETag of the resource.
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The organizational unit's path name. For example, an organizational unit's name within the /corp/support/sales_support parent path is sales_support.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The unique ID of the organizational unit.
	OrgUnitID *string `json:"orgUnitId,omitempty" tf:"org_unit_id,omitempty"`

	// The full path to the organizational unit. The orgUnitPath is a derived property. When listed, it is derived from parentOrgunitPath and organizational unit's name. For example, for an organizational unit named 'apps' under parent organization '/engineering', the orgUnitPath is '/engineering/apps'. In order to edit an orgUnitPath, either update the name of the organization or the parentOrgunitPath. A user's organizational unit determines which Google Workspace services the user has access to. If the user is moved to a new organization, the user's access changes. For more information about organization structures, see the [administration help center](https://support.google.com/a/answer/4352075). For more information about moving a user to a different organization, see [chromeosdevices.update a user](https://developers.google.com/admin-sdk/directory/v1/guides/manage-users#update_user).
	OrgUnitPath *string `json:"orgUnitPath,omitempty" tf:"org_unit_path,omitempty"`

	// The unique ID of the parent organizational unit.
	ParentOrgUnitID *string `json:"parentOrgUnitId,omitempty" tf:"parent_org_unit_id,omitempty"`

	// The organizational unit's parent path. For example, /corp/sales is the parent path for /corp/sales/sales_support organizational unit.
	ParentOrgUnitPath *string `json:"parentOrgUnitPath,omitempty" tf:"parent_org_unit_path,omitempty"`
}

type OrgUnitParameters struct {

	// Defaults to `false`. Determines if a sub-organizational unit can inherit the settings of the parent organization. False means a sub-organizational unit inherits the settings of the nearest parent organizational unit. For more information on inheritance and users in an organization structure, see the [administration help center](https://support.google.com/a/answer/4352075).
	// +kubebuilder:validation:Optional
	BlockInheritance *bool `json:"blockInheritance,omitempty" tf:"block_inheritance,omitempty"`

	// Description of the organizational unit.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The organizational unit's path name. For example, an organizational unit's name within the /corp/support/sales_support parent path is sales_support.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The unique ID of the parent organizational unit.
	// +kubebuilder:validation:Optional
	ParentOrgUnitID *string `json:"parentOrgUnitId,omitempty" tf:"parent_org_unit_id,omitempty"`

	// The organizational unit's parent path. For example, /corp/sales is the parent path for /corp/sales/sales_support organizational unit.
	// +kubebuilder:validation:Optional
	ParentOrgUnitPath *string `json:"parentOrgUnitPath,omitempty" tf:"parent_org_unit_path,omitempty"`
}

// OrgUnitSpec defines the desired state of OrgUnit
type OrgUnitSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OrgUnitParameters `json:"forProvider"`
}

// OrgUnitStatus defines the observed state of OrgUnit.
type OrgUnitStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OrgUnitObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OrgUnit is the Schema for the OrgUnits API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,googleworkspace}
type OrgUnit struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   OrgUnitSpec   `json:"spec"`
	Status OrgUnitStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrgUnitList contains a list of OrgUnits
type OrgUnitList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OrgUnit `json:"items"`
}

// Repository type metadata.
var (
	OrgUnit_Kind             = "OrgUnit"
	OrgUnit_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OrgUnit_Kind}.String()
	OrgUnit_KindAPIVersion   = OrgUnit_Kind + "." + CRDGroupVersion.String()
	OrgUnit_GroupVersionKind = CRDGroupVersion.WithKind(OrgUnit_Kind)
)

func init() {
	SchemeBuilder.Register(&OrgUnit{}, &OrgUnitList{})
}
