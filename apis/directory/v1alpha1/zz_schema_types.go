/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FieldsObservation struct {

	// Display Name of the field.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The ETag of the field.
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	// The unique identifier of the field.
	FieldID *string `json:"fieldId,omitempty" tf:"field_id,omitempty"`

	// The name of the field.
	FieldName *string `json:"fieldName,omitempty" tf:"field_name,omitempty"`

	// The type of the field. Acceptable values are:
	// - `BOOL`
	// - `DATE`
	// - `DOUBLE`
	// - `EMAIL`
	// - `INT64`
	// - `PHONE`
	// - `STRING`
	FieldType *string `json:"fieldType,omitempty" tf:"field_type,omitempty"`

	// Defaults to `true`. Boolean specifying whether the field is indexed or not.
	Indexed *bool `json:"indexed,omitempty" tf:"indexed,omitempty"`

	// Defaults to `false`. A boolean specifying whether this is a multi-valued field or not.
	MultiValued *bool `json:"multiValued,omitempty" tf:"multi_valued,omitempty"`

	// Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the numericIndexingSpec allows range queries to be supported.
	NumericIndexingSpec []NumericIndexingSpecObservation `json:"numericIndexingSpec,omitempty" tf:"numeric_indexing_spec,omitempty"`

	// Defaults to `ALL_DOMAIN_USERS`. Specifies who can view values of this field. See Retrieve users as a non-administrator for more information. Acceptable values are:
	// - `ADMINS_AND_SELF`
	// - `ALL_DOMAIN_USERS`
	// Note: It may take up to 24 hours for changes to this field to be reflected.
	ReadAccessType *string `json:"readAccessType,omitempty" tf:"read_access_type,omitempty"`
}

type FieldsParameters struct {

	// Display Name of the field.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The name of the field.
	// +kubebuilder:validation:Required
	FieldName *string `json:"fieldName" tf:"field_name,omitempty"`

	// The type of the field. Acceptable values are:
	// - `BOOL`
	// - `DATE`
	// - `DOUBLE`
	// - `EMAIL`
	// - `INT64`
	// - `PHONE`
	// - `STRING`
	// +kubebuilder:validation:Required
	FieldType *string `json:"fieldType" tf:"field_type,omitempty"`

	// Defaults to `true`. Boolean specifying whether the field is indexed or not.
	// +kubebuilder:validation:Optional
	Indexed *bool `json:"indexed,omitempty" tf:"indexed,omitempty"`

	// Defaults to `false`. A boolean specifying whether this is a multi-valued field or not.
	// +kubebuilder:validation:Optional
	MultiValued *bool `json:"multiValued,omitempty" tf:"multi_valued,omitempty"`

	// Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the numericIndexingSpec allows range queries to be supported.
	// +kubebuilder:validation:Optional
	NumericIndexingSpec []NumericIndexingSpecParameters `json:"numericIndexingSpec,omitempty" tf:"numeric_indexing_spec,omitempty"`

	// Defaults to `ALL_DOMAIN_USERS`. Specifies who can view values of this field. See Retrieve users as a non-administrator for more information. Acceptable values are:
	// - `ADMINS_AND_SELF`
	// - `ALL_DOMAIN_USERS`
	// Note: It may take up to 24 hours for changes to this field to be reflected.
	// +kubebuilder:validation:Optional
	ReadAccessType *string `json:"readAccessType,omitempty" tf:"read_access_type,omitempty"`
}

type NumericIndexingSpecObservation struct {

	// Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.
	MaxValue *float64 `json:"maxValue,omitempty" tf:"max_value,omitempty"`

	// Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.
	MinValue *float64 `json:"minValue,omitempty" tf:"min_value,omitempty"`
}

type NumericIndexingSpecParameters struct {

	// Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.
	// +kubebuilder:validation:Optional
	MaxValue *float64 `json:"maxValue,omitempty" tf:"max_value,omitempty"`

	// Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.
	// +kubebuilder:validation:Optional
	MinValue *float64 `json:"minValue,omitempty" tf:"min_value,omitempty"`
}

type SchemaObservation struct {

	// Display name for the schema.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// ETag of the resource.
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	// A list of fields in the schema.
	Fields []FieldsObservation `json:"fields,omitempty" tf:"fields,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The unique identifier of the schema.
	SchemaID *string `json:"schemaId,omitempty" tf:"schema_id,omitempty"`

	// The schema's name.
	SchemaName *string `json:"schemaName,omitempty" tf:"schema_name,omitempty"`
}

type SchemaParameters struct {

	// Display name for the schema.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// A list of fields in the schema.
	// +kubebuilder:validation:Optional
	Fields []FieldsParameters `json:"fields,omitempty" tf:"fields,omitempty"`

	// The schema's name.
	// +kubebuilder:validation:Optional
	SchemaName *string `json:"schemaName,omitempty" tf:"schema_name,omitempty"`
}

// SchemaSpec defines the desired state of Schema
type SchemaSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SchemaParameters `json:"forProvider"`
}

// SchemaStatus defines the observed state of Schema.
type SchemaStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SchemaObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Schema is the Schema for the Schemas API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,googleworkspace}
type Schema struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.fields)",message="fields is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.schemaName)",message="schemaName is a required parameter"
	Spec   SchemaSpec   `json:"spec"`
	Status SchemaStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SchemaList contains a list of Schemas
type SchemaList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Schema `json:"items"`
}

// Repository type metadata.
var (
	Schema_Kind             = "Schema"
	Schema_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Schema_Kind}.String()
	Schema_KindAPIVersion   = Schema_Kind + "." + CRDGroupVersion.String()
	Schema_GroupVersionKind = CRDGroupVersion.WithKind(Schema_Kind)
)

func init() {
	SchemeBuilder.Register(&Schema{}, &SchemaList{})
}
