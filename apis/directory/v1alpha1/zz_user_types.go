/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AddressesObservation struct {

	// Country
	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	// The country code. Uses the ISO 3166-1 standard.
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// If the address type is custom, this property contains the custom value.
	CustomType *string `json:"customType,omitempty" tf:"custom_type,omitempty"`

	// For extended addresses, such as an address that includes a sub-region.
	ExtendedAddress *string `json:"extendedAddress,omitempty" tf:"extended_address,omitempty"`

	// A full and unstructured postal address. This is not synced with the structured address fields.
	Formatted *string `json:"formatted,omitempty" tf:"formatted,omitempty"`

	// The town or city of the address.
	Locality *string `json:"locality,omitempty" tf:"locality,omitempty"`

	// The post office box, if present.
	PoBox *string `json:"poBox,omitempty" tf:"po_box,omitempty"`

	// The ZIP or postal code, if applicable.
	PostalCode *string `json:"postalCode,omitempty" tf:"postal_code,omitempty"`

	// If this is the user's primary address. The addresses list may contain only one primary address.
	Primary *bool `json:"primary,omitempty" tf:"primary,omitempty"`

	// The abbreviated province or state.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Indicates if the user-supplied address was formatted. Formatted addresses are not currently supported.
	SourceIsStructured *bool `json:"sourceIsStructured,omitempty" tf:"source_is_structured,omitempty"`

	// The street address, such as 1600 Amphitheatre Parkway. Whitespace within the string is ignored; however, newlines are significant.
	StreetAddress *string `json:"streetAddress,omitempty" tf:"street_address,omitempty"`

	// The address type. Acceptable values: `custom`, `home`, `other`, `work`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type AddressesParameters struct {

	// Country
	// +kubebuilder:validation:Optional
	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	// The country code. Uses the ISO 3166-1 standard.
	// +kubebuilder:validation:Optional
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// If the address type is custom, this property contains the custom value.
	// +kubebuilder:validation:Optional
	CustomType *string `json:"customType,omitempty" tf:"custom_type,omitempty"`

	// For extended addresses, such as an address that includes a sub-region.
	// +kubebuilder:validation:Optional
	ExtendedAddress *string `json:"extendedAddress,omitempty" tf:"extended_address,omitempty"`

	// A full and unstructured postal address. This is not synced with the structured address fields.
	// +kubebuilder:validation:Optional
	Formatted *string `json:"formatted,omitempty" tf:"formatted,omitempty"`

	// The town or city of the address.
	// +kubebuilder:validation:Optional
	Locality *string `json:"locality,omitempty" tf:"locality,omitempty"`

	// The post office box, if present.
	// +kubebuilder:validation:Optional
	PoBox *string `json:"poBox,omitempty" tf:"po_box,omitempty"`

	// The ZIP or postal code, if applicable.
	// +kubebuilder:validation:Optional
	PostalCode *string `json:"postalCode,omitempty" tf:"postal_code,omitempty"`

	// If this is the user's primary address. The addresses list may contain only one primary address.
	// +kubebuilder:validation:Optional
	Primary *bool `json:"primary,omitempty" tf:"primary,omitempty"`

	// The abbreviated province or state.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Indicates if the user-supplied address was formatted. Formatted addresses are not currently supported.
	// +kubebuilder:validation:Optional
	SourceIsStructured *bool `json:"sourceIsStructured,omitempty" tf:"source_is_structured,omitempty"`

	// The street address, such as 1600 Amphitheatre Parkway. Whitespace within the string is ignored; however, newlines are significant.
	// +kubebuilder:validation:Optional
	StreetAddress *string `json:"streetAddress,omitempty" tf:"street_address,omitempty"`

	// The address type. Acceptable values: `custom`, `home`, `other`, `work`.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type CustomSchemasObservation struct {

	// The name of the schema.
	SchemaName *string `json:"schemaName,omitempty" tf:"schema_name,omitempty"`

	// JSON encoded map that represents key/value pairs that correspond to the given schema.
	SchemaValues map[string]*string `json:"schemaValues,omitempty" tf:"schema_values,omitempty"`
}

type CustomSchemasParameters struct {

	// The name of the schema.
	// +crossplane:generate:reference:type=Schema
	// +kubebuilder:validation:Optional
	SchemaName *string `json:"schemaName,omitempty" tf:"schema_name,omitempty"`

	// Reference to a Schema to populate schemaName.
	// +kubebuilder:validation:Optional
	SchemaNameRef *v1.Reference `json:"schemaNameRef,omitempty" tf:"-"`

	// Selector for a Schema to populate schemaName.
	// +kubebuilder:validation:Optional
	SchemaNameSelector *v1.Selector `json:"schemaNameSelector,omitempty" tf:"-"`

	// JSON encoded map that represents key/value pairs that correspond to the given schema.
	// +kubebuilder:validation:Required
	SchemaValues map[string]*string `json:"schemaValues" tf:"schema_values,omitempty"`
}

type EmailsObservation struct {

	// The user's email address. Also serves as the email ID. This value can be the user's primary email address or an alias.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// If the value of type is custom, this property contains the custom type string.
	CustomType *string `json:"customType,omitempty" tf:"custom_type,omitempty"`

	// Defaults to `false`. Indicates if this is the user's primary email. Only one entry can be marked as primary.
	Primary *bool `json:"primary,omitempty" tf:"primary,omitempty"`

	// The type of the email account. Acceptable values: `custom`, `home`, `other`, `work`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type EmailsParameters struct {

	// The user's email address. Also serves as the email ID. This value can be the user's primary email address or an alias.
	// +kubebuilder:validation:Optional
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// If the value of type is custom, this property contains the custom type string.
	// +kubebuilder:validation:Optional
	CustomType *string `json:"customType,omitempty" tf:"custom_type,omitempty"`

	// Defaults to `false`. Indicates if this is the user's primary email. Only one entry can be marked as primary.
	// +kubebuilder:validation:Optional
	Primary *bool `json:"primary,omitempty" tf:"primary,omitempty"`

	// The type of the email account. Acceptable values: `custom`, `home`, `other`, `work`.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type ExternalIdsObservation struct {

	// If the external ID type is custom, this property contains the custom value and must be set.
	CustomType *string `json:"customType,omitempty" tf:"custom_type,omitempty"`

	// The type of external ID. If set to custom, customType must also be set. Acceptable values: `account`, `custom`, `customer`, `login_id`, `network`, `organization`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The value of the ID.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ExternalIdsParameters struct {

	// If the external ID type is custom, this property contains the custom value and must be set.
	// +kubebuilder:validation:Optional
	CustomType *string `json:"customType,omitempty" tf:"custom_type,omitempty"`

	// The type of external ID. If set to custom, customType must also be set. Acceptable values: `account`, `custom`, `customer`, `login_id`, `network`, `organization`.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// The value of the ID.
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type ImsObservation struct {

	// If the protocol value is custom_protocol, this property holds the custom protocol's string.
	CustomProtocol *string `json:"customProtocol,omitempty" tf:"custom_protocol,omitempty"`

	// If the IM type is custom, this property holds the custom type string.
	CustomType *string `json:"customType,omitempty" tf:"custom_type,omitempty"`

	// The user's IM network ID.
	Im *string `json:"im,omitempty" tf:"im,omitempty"`

	// If this is the user's primary IM. Only one entry in the IM list can have a value of true.
	Primary *bool `json:"primary,omitempty" tf:"primary,omitempty"`

	// An IM protocol identifies the IM network. The value can be a custom network or the standard network. Acceptable values: `aim`, `custom_protocol`, `gtalk`, `icq`, `jabber`, `msn`, `net_meeting`, `qq`, `skype`, `yahoo`.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Acceptable values: `custom`, `home`, `other`, `work`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ImsParameters struct {

	// If the protocol value is custom_protocol, this property holds the custom protocol's string.
	// +kubebuilder:validation:Optional
	CustomProtocol *string `json:"customProtocol,omitempty" tf:"custom_protocol,omitempty"`

	// If the IM type is custom, this property holds the custom type string.
	// +kubebuilder:validation:Optional
	CustomType *string `json:"customType,omitempty" tf:"custom_type,omitempty"`

	// The user's IM network ID.
	// +kubebuilder:validation:Optional
	Im *string `json:"im,omitempty" tf:"im,omitempty"`

	// If this is the user's primary IM. Only one entry in the IM list can have a value of true.
	// +kubebuilder:validation:Optional
	Primary *bool `json:"primary,omitempty" tf:"primary,omitempty"`

	// An IM protocol identifies the IM network. The value can be a custom network or the standard network. Acceptable values: `aim`, `custom_protocol`, `gtalk`, `icq`, `jabber`, `msn`, `net_meeting`, `qq`, `skype`, `yahoo`.
	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// Acceptable values: `custom`, `home`, `other`, `work`.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type KeywordsObservation struct {

	// Custom Type.
	CustomType *string `json:"customType,omitempty" tf:"custom_type,omitempty"`

	// Each entry can have a type which indicates standard type of that entry. For example, keyword could be of type occupation or outlook. In addition to the standard type, an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value. Acceptable values: `custom`, `mission`, `occupation`, `outlook`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Keyword.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type KeywordsParameters struct {

	// Custom Type.
	// +kubebuilder:validation:Optional
	CustomType *string `json:"customType,omitempty" tf:"custom_type,omitempty"`

	// Each entry can have a type which indicates standard type of that entry. For example, keyword could be of type occupation or outlook. In addition to the standard type, an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value. Acceptable values: `custom`, `mission`, `occupation`, `outlook`
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// Keyword.
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type LanguagesObservation struct {

	// Other language. A user can provide their own language name if there is no corresponding Google III language code. If this is set, LanguageCode can't be set.
	CustomLanguage *string `json:"customLanguage,omitempty" tf:"custom_language,omitempty"`

	// Defaults to `en`. Language Code. Should be used for storing Google III LanguageCode string representation for language. Illegal values cause SchemaException.
	LanguageCode *string `json:"languageCode,omitempty" tf:"language_code,omitempty"`

	// Defaults to `preferred`. If present, controls whether the specified languageCode is the user's preferred language. Allowed values are `preferred` and `not_preferred`.
	Preference *string `json:"preference,omitempty" tf:"preference,omitempty"`
}

type LanguagesParameters struct {

	// Other language. A user can provide their own language name if there is no corresponding Google III language code. If this is set, LanguageCode can't be set.
	// +kubebuilder:validation:Optional
	CustomLanguage *string `json:"customLanguage,omitempty" tf:"custom_language,omitempty"`

	// Defaults to `en`. Language Code. Should be used for storing Google III LanguageCode string representation for language. Illegal values cause SchemaException.
	// +kubebuilder:validation:Optional
	LanguageCode *string `json:"languageCode,omitempty" tf:"language_code,omitempty"`

	// Defaults to `preferred`. If present, controls whether the specified languageCode is the user's preferred language. Allowed values are `preferred` and `not_preferred`.
	// +kubebuilder:validation:Optional
	Preference *string `json:"preference,omitempty" tf:"preference,omitempty"`
}

type LocationsObservation struct {

	// Textual location. This is most useful for display purposes to concisely describe the location. For example, Mountain View, CA or Near Seattle.
	Area *string `json:"area,omitempty" tf:"area,omitempty"`

	// Building identifier.
	BuildingID *string `json:"buildingId,omitempty" tf:"building_id,omitempty"`

	// If the location type is custom, this property contains the custom value.
	CustomType *string `json:"customType,omitempty" tf:"custom_type,omitempty"`

	// Most specific textual code of individual desk location.
	DeskCode *string `json:"deskCode,omitempty" tf:"desk_code,omitempty"`

	// Floor name/number.
	FloorName *string `json:"floorName,omitempty" tf:"floor_name,omitempty"`

	// Floor section. More specific location within the floor. For example, if a floor is divided into sections A, B, and C, this field would identify one of those values.
	FloorSection *string `json:"floorSection,omitempty" tf:"floor_section,omitempty"`

	// The location type. Acceptable values: `custom`, `default`, `desk`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type LocationsParameters struct {

	// Textual location. This is most useful for display purposes to concisely describe the location. For example, Mountain View, CA or Near Seattle.
	// +kubebuilder:validation:Optional
	Area *string `json:"area,omitempty" tf:"area,omitempty"`

	// Building identifier.
	// +kubebuilder:validation:Optional
	BuildingID *string `json:"buildingId,omitempty" tf:"building_id,omitempty"`

	// If the location type is custom, this property contains the custom value.
	// +kubebuilder:validation:Optional
	CustomType *string `json:"customType,omitempty" tf:"custom_type,omitempty"`

	// Most specific textual code of individual desk location.
	// +kubebuilder:validation:Optional
	DeskCode *string `json:"deskCode,omitempty" tf:"desk_code,omitempty"`

	// Floor name/number.
	// +kubebuilder:validation:Optional
	FloorName *string `json:"floorName,omitempty" tf:"floor_name,omitempty"`

	// Floor section. More specific location within the floor. For example, if a floor is divided into sections A, B, and C, this field would identify one of those values.
	// +kubebuilder:validation:Optional
	FloorSection *string `json:"floorSection,omitempty" tf:"floor_section,omitempty"`

	// The location type. Acceptable values: `custom`, `default`, `desk`
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type NameObservation struct {

	// The user's last name.
	FamilyName *string `json:"familyName,omitempty" tf:"family_name,omitempty"`

	// The user's full name formed by concatenating the first and last name values.
	FullName *string `json:"fullName,omitempty" tf:"full_name,omitempty"`

	// The user's first name.
	GivenName *string `json:"givenName,omitempty" tf:"given_name,omitempty"`
}

type NameParameters struct {

	// The user's last name.
	// +kubebuilder:validation:Required
	FamilyName *string `json:"familyName" tf:"family_name,omitempty"`

	// The user's first name.
	// +kubebuilder:validation:Optional
	GivenName *string `json:"givenName,omitempty" tf:"given_name,omitempty"`
}

type OrganizationsObservation struct {

	// The cost center of the user's organization.
	CostCenter *string `json:"costCenter,omitempty" tf:"cost_center,omitempty"`

	// If the value of type is custom, this property contains the custom value.
	CustomType *string `json:"customType,omitempty" tf:"custom_type,omitempty"`

	// Specifies the department within the organization, such as sales or engineering.
	Department *string `json:"department,omitempty" tf:"department,omitempty"`

	// The description of the organization.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The domain the organization belongs to.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// The full-time equivalent millipercent within the organization (100000 = 100%)
	FullTimeEquivalent *float64 `json:"fullTimeEquivalent,omitempty" tf:"full_time_equivalent,omitempty"`

	// The physical location of the organization. This does not need to be a fully qualified address.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The name of the organization.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Indicates if this is the user's primary organization. A user may only have one primary organization.
	Primary *bool `json:"primary,omitempty" tf:"primary,omitempty"`

	// Text string symbol of the organization. For example, the text symbol for Google is GOOG.
	Symbol *string `json:"symbol,omitempty" tf:"symbol,omitempty"`

	// The user's title within the organization. For example, member or engineer.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The type of organization. Acceptable values: `domain_only`, `school`, `unknown`, `work`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type OrganizationsParameters struct {

	// The cost center of the user's organization.
	// +kubebuilder:validation:Optional
	CostCenter *string `json:"costCenter,omitempty" tf:"cost_center,omitempty"`

	// If the value of type is custom, this property contains the custom value.
	// +kubebuilder:validation:Optional
	CustomType *string `json:"customType,omitempty" tf:"custom_type,omitempty"`

	// Specifies the department within the organization, such as sales or engineering.
	// +kubebuilder:validation:Optional
	Department *string `json:"department,omitempty" tf:"department,omitempty"`

	// The description of the organization.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The domain the organization belongs to.
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// The full-time equivalent millipercent within the organization (100000 = 100%)
	// +kubebuilder:validation:Optional
	FullTimeEquivalent *float64 `json:"fullTimeEquivalent,omitempty" tf:"full_time_equivalent,omitempty"`

	// The physical location of the organization. This does not need to be a fully qualified address.
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The name of the organization.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Indicates if this is the user's primary organization. A user may only have one primary organization.
	// +kubebuilder:validation:Optional
	Primary *bool `json:"primary,omitempty" tf:"primary,omitempty"`

	// Text string symbol of the organization. For example, the text symbol for Google is GOOG.
	// +kubebuilder:validation:Optional
	Symbol *string `json:"symbol,omitempty" tf:"symbol,omitempty"`

	// The user's title within the organization. For example, member or engineer.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The type of organization. Acceptable values: `domain_only`, `school`, `unknown`, `work`.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type PhonesObservation struct {

	// If the phone number type is custom, this property contains the custom value and must be set.
	CustomType *string `json:"customType,omitempty" tf:"custom_type,omitempty"`

	// Indicates if this is the user's primary phone number. A user may only have one primary phone number.
	Primary *bool `json:"primary,omitempty" tf:"primary,omitempty"`

	// The type of phone number. Acceptable values: `assistant`, `callback`, `car`, `company_main` , `custom`, `grand_central`, `home`, `home_fax`, `isdn`, `main`, `mobile`, `other`, `other_fax`, `pager`, `radio`, `telex`, `tty_tdd`, `work`, `work_fax`, `work_mobile`, `work_pager`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// A human-readable phone number. It may be in any telephone number format.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type PhonesParameters struct {

	// If the phone number type is custom, this property contains the custom value and must be set.
	// +kubebuilder:validation:Optional
	CustomType *string `json:"customType,omitempty" tf:"custom_type,omitempty"`

	// Indicates if this is the user's primary phone number. A user may only have one primary phone number.
	// +kubebuilder:validation:Optional
	Primary *bool `json:"primary,omitempty" tf:"primary,omitempty"`

	// The type of phone number. Acceptable values: `assistant`, `callback`, `car`, `company_main` , `custom`, `grand_central`, `home`, `home_fax`, `isdn`, `main`, `mobile`, `other`, `other_fax`, `pager`, `radio`, `telex`, `tty_tdd`, `work`, `work_fax`, `work_mobile`, `work_pager`.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// A human-readable phone number. It may be in any telephone number format.
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type PosixAccountsObservation struct {

	// A POSIX account field identifier.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// The default group ID.
	GID *string `json:"gid,omitempty" tf:"gid,omitempty"`

	// The GECOS (user information) for this account.
	Gecos *string `json:"gecos,omitempty" tf:"gecos,omitempty"`

	// The path to the home directory for this account.
	HomeDirectory *string `json:"homeDirectory,omitempty" tf:"home_directory,omitempty"`

	// The operating system type for this account. Acceptable values: `linux`, `unspecified`, `windows`.
	OperatingSystemType *string `json:"operatingSystemType,omitempty" tf:"operating_system_type,omitempty"`

	// If this is user's primary account within the SystemId.
	Primary *bool `json:"primary,omitempty" tf:"primary,omitempty"`

	// The path to the login shell for this account.
	Shell *string `json:"shell,omitempty" tf:"shell,omitempty"`

	// System identifier for which account Username or Uid apply to.
	SystemID *string `json:"systemId,omitempty" tf:"system_id,omitempty"`

	// The POSIX compliant user ID.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`

	// The username of the account.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type PosixAccountsParameters struct {

	// A POSIX account field identifier.
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// The default group ID.
	// +kubebuilder:validation:Optional
	GID *string `json:"gid,omitempty" tf:"gid,omitempty"`

	// The GECOS (user information) for this account.
	// +kubebuilder:validation:Optional
	Gecos *string `json:"gecos,omitempty" tf:"gecos,omitempty"`

	// The path to the home directory for this account.
	// +kubebuilder:validation:Optional
	HomeDirectory *string `json:"homeDirectory,omitempty" tf:"home_directory,omitempty"`

	// The operating system type for this account. Acceptable values: `linux`, `unspecified`, `windows`.
	// +kubebuilder:validation:Optional
	OperatingSystemType *string `json:"operatingSystemType,omitempty" tf:"operating_system_type,omitempty"`

	// If this is user's primary account within the SystemId.
	// +kubebuilder:validation:Optional
	Primary *bool `json:"primary,omitempty" tf:"primary,omitempty"`

	// The path to the login shell for this account.
	// +kubebuilder:validation:Optional
	Shell *string `json:"shell,omitempty" tf:"shell,omitempty"`

	// System identifier for which account Username or Uid apply to.
	// +kubebuilder:validation:Optional
	SystemID *string `json:"systemId,omitempty" tf:"system_id,omitempty"`

	// The POSIX compliant user ID.
	// +kubebuilder:validation:Optional
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`

	// The username of the account.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type RelationsObservation struct {

	// If the value of type is custom, this property contains the custom type string.
	CustomType *string `json:"customType,omitempty" tf:"custom_type,omitempty"`

	// The type of relation. Acceptable values: `admin_assistant`, `assistant`, `brother`, `child`, `custom`, `domestic_partner`, `dotted_line_manager`, `exec_assistant`, `father`, `friend`, `manager`, `mother`, `parent`, `partner`, `referred_by`, `relative`, `sister`, `spouse`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The name of the person the user is related to.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type RelationsParameters struct {

	// If the value of type is custom, this property contains the custom type string.
	// +kubebuilder:validation:Optional
	CustomType *string `json:"customType,omitempty" tf:"custom_type,omitempty"`

	// The type of relation. Acceptable values: `admin_assistant`, `assistant`, `brother`, `child`, `custom`, `domestic_partner`, `dotted_line_manager`, `exec_assistant`, `father`, `friend`, `manager`, `mother`, `parent`, `partner`, `referred_by`, `relative`, `sister`, `spouse`.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// The name of the person the user is related to.
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type SSHPublicKeysObservation struct {

	// An expiration time in microseconds since epoch.
	ExpirationTimeUsec *string `json:"expirationTimeUsec,omitempty" tf:"expiration_time_usec,omitempty"`

	// A SHA-256 fingerprint of the SSH public key.
	Fingerprint *string `json:"fingerprint,omitempty" tf:"fingerprint,omitempty"`

	// An SSH public key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`
}

type SSHPublicKeysParameters struct {

	// An expiration time in microseconds since epoch.
	// +kubebuilder:validation:Optional
	ExpirationTimeUsec *string `json:"expirationTimeUsec,omitempty" tf:"expiration_time_usec,omitempty"`

	// An SSH public key.
	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`
}

type UserObservation struct {

	// A list of the user's addresses. The maximum allowed data size is 10Kb.
	Addresses []AddressesObservation `json:"addresses,omitempty" tf:"addresses,omitempty"`

	// This property is true if the user has completed an initial login and accepted the Terms of Service agreement.
	AgreedToTerms *bool `json:"agreedToTerms,omitempty" tf:"agreed_to_terms,omitempty"`

	// asps.list of the user's alias email addresses.
	Aliases []*string `json:"aliases,omitempty" tf:"aliases,omitempty"`

	// Indicates if user is archived.
	Archived *bool `json:"archived,omitempty" tf:"archived,omitempty"`

	// Indicates if the user is forced to change their password at next login. This setting doesn't apply when the user signs in via a third-party identity provider.
	ChangePasswordAtNextLogin *bool `json:"changePasswordAtNextLogin,omitempty" tf:"change_password_at_next_login,omitempty"`

	// The time the user's account was created. The value is in ISO 8601 date and time format. The time is the complete date plus hours, minutes, and seconds in the form YYYY-MM-DDThh:mm:ssTZD. For example, 2010-04-05T17:30:04+01:00.
	CreationTime *string `json:"creationTime,omitempty" tf:"creation_time,omitempty"`

	// Custom fields of the user.
	CustomSchemas []CustomSchemasObservation `json:"customSchemas,omitempty" tf:"custom_schemas,omitempty"`

	// The customer ID to retrieve all account users. You can use the alias my_customer to represent your account's customerId. As a reseller administrator, you can use the resold customer account's customerId. To get a customerId, use the account's primary domain in the domain parameter of a users.list request.
	CustomerID *string `json:"customerId,omitempty" tf:"customer_id,omitempty"`

	// The time the user's account was deleted. The value is in ISO 8601 date and time format The time is the complete date plus hours, minutes, and seconds in the form YYYY-MM-DDThh:mm:ssTZD. For example 2010-04-05T17:30:04+01:00.
	DeletionTime *string `json:"deletionTime,omitempty" tf:"deletion_time,omitempty"`

	// A list of the user's email addresses. The maximum allowed data size is 10Kb.
	Emails []EmailsObservation `json:"emails,omitempty" tf:"emails,omitempty"`

	// ETag of the resource.
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	// A list of external IDs for the user, such as an employee or network ID. The maximum allowed data size is 2Kb.
	ExternalIds []ExternalIdsObservation `json:"externalIds,omitempty" tf:"external_ids,omitempty"`

	// Stores the hash format of the password property. We recommend sending the password property value as a base 16 bit hexadecimal-encoded hash value. Set the hashFunction values as either the SHA-1, MD5, or crypt hash format.
	HashFunction *string `json:"hashFunction,omitempty" tf:"hash_function,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// If true, the user's IP address is added to the allow list.
	IPAllowlist *bool `json:"ipAllowlist,omitempty" tf:"ip_allowlist,omitempty"`

	// The user's Instant Messenger (IM) accounts. A user account can have multiple ims properties. But, only one of these ims properties can be the primary IM contact. The maximum allowed data size is 2Kb.
	Ims []ImsObservation `json:"ims,omitempty" tf:"ims,omitempty"`

	// Defaults to `true`. Indicates if the user's profile is visible in the Google Workspace global address list when the contact sharing feature is enabled for the domain.
	IncludeInGlobalAddressList *bool `json:"includeInGlobalAddressList,omitempty" tf:"include_in_global_address_list,omitempty"`

	// Indicates a user with super admininistrator privileges.
	IsAdmin *bool `json:"isAdmin,omitempty" tf:"is_admin,omitempty"`

	// Indicates if the user is a delegated administrator.
	IsDelegatedAdmin *bool `json:"isDelegatedAdmin,omitempty" tf:"is_delegated_admin,omitempty"`

	// Is 2-step verification enforced.
	IsEnforcedIn2StepVerification *bool `json:"isEnforcedIn2StepVerification,omitempty" tf:"is_enforced_in_2_step_verification,omitempty"`

	// Is enrolled in 2-step verification.
	IsEnrolledIn2StepVerification *bool `json:"isEnrolledIn2StepVerification,omitempty" tf:"is_enrolled_in_2_step_verification,omitempty"`

	// Indicates if the user's Google mailbox is created. This property is only applicable if the user has been assigned a Gmail license.
	IsMailboxSetup *bool `json:"isMailboxSetup,omitempty" tf:"is_mailbox_setup,omitempty"`

	// A list of the user's keywords. The maximum allowed data size is 1Kb.
	Keywords []KeywordsObservation `json:"keywords,omitempty" tf:"keywords,omitempty"`

	// A list of the user's languages. The maximum allowed data size is 1Kb.
	Languages []LanguagesObservation `json:"languages,omitempty" tf:"languages,omitempty"`

	// The last time the user logged into the user's account. The value is in ISO 8601 date and time format. The time is the complete date plus hours, minutes, and seconds in the form YYYY-MM-DDThh:mm:ssTZD. For example, 2010-04-05T17:30:04+01:00.
	LastLoginTime *string `json:"lastLoginTime,omitempty" tf:"last_login_time,omitempty"`

	// A list of the user's locations. The maximum allowed data size is 10Kb.
	Locations []LocationsObservation `json:"locations,omitempty" tf:"locations,omitempty"`

	// Holds the given and family names of the user, and the read-only fullName value. The maximum number of characters in the givenName and in the familyName values is 60. In addition, name values support unicode/UTF-8 characters, and can contain spaces, letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and periods (.). Maximum allowed data size for this field is 1Kb.
	Name []NameObservation `json:"name,omitempty" tf:"name,omitempty"`

	// asps.list of the user's non-editable alias email addresses. These are typically outside the account's primary domain or sub-domain.
	NonEditableAliases []*string `json:"nonEditableAliases,omitempty" tf:"non_editable_aliases,omitempty"`

	// The full path of the parent organization associated with the user. If the parent organization is the top-level, it is represented as a forward slash (/).
	OrgUnitPath *string `json:"orgUnitPath,omitempty" tf:"org_unit_path,omitempty"`

	// A list of organizations the user belongs to. The maximum allowed data size is 10Kb.
	Organizations []OrganizationsObservation `json:"organizations,omitempty" tf:"organizations,omitempty"`

	// A list of the user's phone numbers. The maximum allowed data size is 1Kb.
	Phones []PhonesObservation `json:"phones,omitempty" tf:"phones,omitempty"`

	// A list of POSIX account information for the user.
	PosixAccounts []PosixAccountsObservation `json:"posixAccounts,omitempty" tf:"posix_accounts,omitempty"`

	// The user's primary email address. The primaryEmail must be unique and cannot be an alias of another user.
	PrimaryEmail *string `json:"primaryEmail,omitempty" tf:"primary_email,omitempty"`

	// Recovery email of the user.
	RecoveryEmail *string `json:"recoveryEmail,omitempty" tf:"recovery_email,omitempty"`

	// Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: +16506661212.
	RecoveryPhone *string `json:"recoveryPhone,omitempty" tf:"recovery_phone,omitempty"`

	// A list of the user's relationships to other users. The maximum allowed data size for this field is 2Kb.
	Relations []RelationsObservation `json:"relations,omitempty" tf:"relations,omitempty"`

	// A list of SSH public keys. The maximum allowed data size is 10Kb.
	SSHPublicKeys []SSHPublicKeysObservation `json:"sshPublicKeys,omitempty" tf:"ssh_public_keys,omitempty"`

	// Indicates if user is suspended.
	Suspended *bool `json:"suspended,omitempty" tf:"suspended,omitempty"`

	// Has the reason a user account is suspended either by the administrator or by Google at the time of suspension. The property is returned only if the suspended property is true.
	SuspensionReason *string `json:"suspensionReason,omitempty" tf:"suspension_reason,omitempty"`

	// ETag of the user's photo
	ThumbnailPhotoEtag *string `json:"thumbnailPhotoEtag,omitempty" tf:"thumbnail_photo_etag,omitempty"`

	// Photo Url of the user.
	ThumbnailPhotoURL *string `json:"thumbnailPhotoUrl,omitempty" tf:"thumbnail_photo_url,omitempty"`

	// A list of the user's websites. The maximum allowed data size is 2Kb.
	Websites []WebsitesObservation `json:"websites,omitempty" tf:"websites,omitempty"`
}

type UserParameters struct {

	// A list of the user's addresses. The maximum allowed data size is 10Kb.
	// +kubebuilder:validation:Optional
	Addresses []AddressesParameters `json:"addresses,omitempty" tf:"addresses,omitempty"`

	// asps.list of the user's alias email addresses.
	// +kubebuilder:validation:Optional
	Aliases []*string `json:"aliases,omitempty" tf:"aliases,omitempty"`

	// Indicates if user is archived.
	// +kubebuilder:validation:Optional
	Archived *bool `json:"archived,omitempty" tf:"archived,omitempty"`

	// Indicates if the user is forced to change their password at next login. This setting doesn't apply when the user signs in via a third-party identity provider.
	// +kubebuilder:validation:Optional
	ChangePasswordAtNextLogin *bool `json:"changePasswordAtNextLogin,omitempty" tf:"change_password_at_next_login,omitempty"`

	// Custom fields of the user.
	// +kubebuilder:validation:Optional
	CustomSchemas []CustomSchemasParameters `json:"customSchemas,omitempty" tf:"custom_schemas,omitempty"`

	// A list of the user's email addresses. The maximum allowed data size is 10Kb.
	// +kubebuilder:validation:Optional
	Emails []EmailsParameters `json:"emails,omitempty" tf:"emails,omitempty"`

	// A list of external IDs for the user, such as an employee or network ID. The maximum allowed data size is 2Kb.
	// +kubebuilder:validation:Optional
	ExternalIds []ExternalIdsParameters `json:"externalIds,omitempty" tf:"external_ids,omitempty"`

	// Stores the hash format of the password property. We recommend sending the password property value as a base 16 bit hexadecimal-encoded hash value. Set the hashFunction values as either the SHA-1, MD5, or crypt hash format.
	// +kubebuilder:validation:Optional
	HashFunction *string `json:"hashFunction,omitempty" tf:"hash_function,omitempty"`

	// If true, the user's IP address is added to the allow list.
	// +kubebuilder:validation:Optional
	IPAllowlist *bool `json:"ipAllowlist,omitempty" tf:"ip_allowlist,omitempty"`

	// The user's Instant Messenger (IM) accounts. A user account can have multiple ims properties. But, only one of these ims properties can be the primary IM contact. The maximum allowed data size is 2Kb.
	// +kubebuilder:validation:Optional
	Ims []ImsParameters `json:"ims,omitempty" tf:"ims,omitempty"`

	// Defaults to `true`. Indicates if the user's profile is visible in the Google Workspace global address list when the contact sharing feature is enabled for the domain.
	// +kubebuilder:validation:Optional
	IncludeInGlobalAddressList *bool `json:"includeInGlobalAddressList,omitempty" tf:"include_in_global_address_list,omitempty"`

	// Indicates a user with super admininistrator privileges.
	// +kubebuilder:validation:Optional
	IsAdmin *bool `json:"isAdmin,omitempty" tf:"is_admin,omitempty"`

	// A list of the user's keywords. The maximum allowed data size is 1Kb.
	// +kubebuilder:validation:Optional
	Keywords []KeywordsParameters `json:"keywords,omitempty" tf:"keywords,omitempty"`

	// A list of the user's languages. The maximum allowed data size is 1Kb.
	// +kubebuilder:validation:Optional
	Languages []LanguagesParameters `json:"languages,omitempty" tf:"languages,omitempty"`

	// A list of the user's locations. The maximum allowed data size is 10Kb.
	// +kubebuilder:validation:Optional
	Locations []LocationsParameters `json:"locations,omitempty" tf:"locations,omitempty"`

	// Holds the given and family names of the user, and the read-only fullName value. The maximum number of characters in the givenName and in the familyName values is 60. In addition, name values support unicode/UTF-8 characters, and can contain spaces, letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and periods (.). Maximum allowed data size for this field is 1Kb.
	// +kubebuilder:validation:Optional
	Name []NameParameters `json:"name,omitempty" tf:"name,omitempty"`

	// The full path of the parent organization associated with the user. If the parent organization is the top-level, it is represented as a forward slash (/).
	// +kubebuilder:validation:Optional
	OrgUnitPath *string `json:"orgUnitPath,omitempty" tf:"org_unit_path,omitempty"`

	// A list of organizations the user belongs to. The maximum allowed data size is 10Kb.
	// +kubebuilder:validation:Optional
	Organizations []OrganizationsParameters `json:"organizations,omitempty" tf:"organizations,omitempty"`

	// Stores the password for the user account. A password can contain any combination of ASCII characters. A minimum of 8 characters is required. The maximum length is 100 characters. As the API does not return the value of password, this field is write-only, and the value stored in the state will be what is provided in the configuration. The field is required on create and will be empty on import.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// A list of the user's phone numbers. The maximum allowed data size is 1Kb.
	// +kubebuilder:validation:Optional
	Phones []PhonesParameters `json:"phones,omitempty" tf:"phones,omitempty"`

	// A list of POSIX account information for the user.
	// +kubebuilder:validation:Optional
	PosixAccounts []PosixAccountsParameters `json:"posixAccounts,omitempty" tf:"posix_accounts,omitempty"`

	// The user's primary email address. The primaryEmail must be unique and cannot be an alias of another user.
	// +kubebuilder:validation:Optional
	PrimaryEmail *string `json:"primaryEmail,omitempty" tf:"primary_email,omitempty"`

	// Recovery email of the user.
	// +kubebuilder:validation:Optional
	RecoveryEmail *string `json:"recoveryEmail,omitempty" tf:"recovery_email,omitempty"`

	// Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: +16506661212.
	// +kubebuilder:validation:Optional
	RecoveryPhone *string `json:"recoveryPhone,omitempty" tf:"recovery_phone,omitempty"`

	// A list of the user's relationships to other users. The maximum allowed data size for this field is 2Kb.
	// +kubebuilder:validation:Optional
	Relations []RelationsParameters `json:"relations,omitempty" tf:"relations,omitempty"`

	// A list of SSH public keys. The maximum allowed data size is 10Kb.
	// +kubebuilder:validation:Optional
	SSHPublicKeys []SSHPublicKeysParameters `json:"sshPublicKeys,omitempty" tf:"ssh_public_keys,omitempty"`

	// Indicates if user is suspended.
	// +kubebuilder:validation:Optional
	Suspended *bool `json:"suspended,omitempty" tf:"suspended,omitempty"`

	// A list of the user's websites. The maximum allowed data size is 2Kb.
	// +kubebuilder:validation:Optional
	Websites []WebsitesParameters `json:"websites,omitempty" tf:"websites,omitempty"`
}

type WebsitesObservation struct {

	// The custom type. Only used if the type is custom.
	CustomType *string `json:"customType,omitempty" tf:"custom_type,omitempty"`

	// If this is user's primary website or not.
	Primary *bool `json:"primary,omitempty" tf:"primary,omitempty"`

	// The type or purpose of the website. For example, a website could be labeled as home or blog. Alternatively, an entry can have a custom type Custom types must have a customType value. Acceptable values: `app_install_page`, `blog`, `custom`, `ftp` , `home`, `home_page`, `other`, `profile`, `reservations`, `resume`, `work`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The URL of the website.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type WebsitesParameters struct {

	// The custom type. Only used if the type is custom.
	// +kubebuilder:validation:Optional
	CustomType *string `json:"customType,omitempty" tf:"custom_type,omitempty"`

	// If this is user's primary website or not.
	// +kubebuilder:validation:Optional
	Primary *bool `json:"primary,omitempty" tf:"primary,omitempty"`

	// The type or purpose of the website. For example, a website could be labeled as home or blog. Alternatively, an entry can have a custom type Custom types must have a customType value. Acceptable values: `app_install_page`, `blog`, `custom`, `ftp` , `home`, `home_page`, `other`, `profile`, `reservations`, `resume`, `work`.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// The URL of the website.
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// UserSpec defines the desired state of User
type UserSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserParameters `json:"forProvider"`
}

// UserStatus defines the observed state of User.
type UserStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// User is the Schema for the Users API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,googleworkspace}
type User struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.primaryEmail)",message="primaryEmail is a required parameter"
	Spec   UserSpec   `json:"spec"`
	Status UserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserList contains a list of Users
type UserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []User `json:"items"`
}

// Repository type metadata.
var (
	User_Kind             = "User"
	User_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: User_Kind}.String()
	User_KindAPIVersion   = User_Kind + "." + CRDGroupVersion.String()
	User_GroupVersionKind = CRDGroupVersion.WithKind(User_Kind)
)

func init() {
	SchemeBuilder.Register(&User{}, &UserList{})
}
